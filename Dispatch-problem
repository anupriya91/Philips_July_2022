import Foundation

//Object Structure
public class ComplexObject{

    let structure = [A]()
    public func Operation(visitor: C){
        for item in structure {
            item.Accept(visitor: visitor);
        }
    }
    
    public func AddStructureItem(item: A){
        structure.append(item);
    }
}
public class A{

    public  func M(){
        print("A.M");
    }
    public func Accept(visitor: C ){
        
        visitor.O(obj: self);
    }

}

public class B:A{

    public override func M()
    {
        print("B.M");
    }
    public override func Accept (visitor: C){
        
        visitor.O(obj: self);
    }

}

//Visitor Class
public class C{

    //operation
    public  func O(obj:A){
    print("C.A.N");
    obj.M();
}
    //operation
    public func O(obj: B) {
    print("C.B.N");
    obj.M();
}

}
public class Program
{
    public static func Main()
    {
        let obj = A();
        let obj_b = B();
        
        let tree = ComplexObject();
        tree.AddStructureItem(item: obj);
        tree.AddStructureItem(item: obj_b);
        
        let cObj = C();
        tree.Operation(cObj);
    }
}
